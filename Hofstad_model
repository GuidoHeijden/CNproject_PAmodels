import networkx as nx
import graphviz as gv
import pydot as pyd
import time
import numpy as np


def main():
    delta = float(input('Enter the value of delta\n'))
    m = 1  # int(input('Enter the value of m\n'))
    which_model = str(input('Which model do you want to use? (a | b)'))
    G = hofstad_PA_start(m)
    G = hofstad_PA(G, delta, m, t=1, t_stop=100, verbose=False)
    display_graph(G)

def display_graph(G):
    pos = nx.circular_layout(G)
    nx.drawing.nx_pydot.write_dot(G, r"C:\Users\Guido vd Heijden\Documents\School\Master - year 1 - 1a\Complex Networks\hofstad_PA.dot")
    s = gv.Source.from_file(filename=r"C:\Users\Guido vd Heijden\Documents\School\Master - year 1 - 1a\Complex Networks\hofstad_PA.dot", )
    s.view()
    time.sleep(1)


def hofstad_PA_start(m=1):
    G = nx.Graph()
    G.add_node(1)
    for i in range(m):
        G.add_edge(1, 1)
    return G


def hofstad_PA(G, delta, m, t, t_stop=10, verbose=True):
    P = []
    for n in G.nodes():
        P.append( (G.degree(n) + delta) / (t*(2 + delta) + (1 + delta)) )
    G.add_node(t+1)
    P.append( (1 + delta) / (t*(2 + delta) + (1 + delta)) )
    second_node = np.random.choice(range(1, t+2), 1, P)[0]
    G.add_edge(t+1, second_node)

    if verbose:
        print("Vertices and probability of attachment:\n", {n : p for n, p in zip(range(1, t + 2), P)})
        print("Randomly picked vertex:", second_node)
        print("Sum of probability distribution = ", sum(P))
        display_graph(G)
    if t >= t_stop:
        return G
    else:
        return hofstad_PA(G, delta, m, t+1, t_stop=t_stop, verbose=verbose)


def hofstad_PA_start_b(m=1):
    G = nx.Graph()
    G.add_node(1)
    return G


def hofstad_PA_b(G, delta, m, t, t_stop=10, verbose=True):
    P = []
    for n in G.nodes():
        P.append( (G.degree(n) + delta) / t*(2 + delta) )
    G.add_node(t+1)
    second_node = np.random.choice(range(1, t+2), 1, P)[0]
    G.add_edge(t+1, second_node)

    if verbose:
        print("Vertices and probability of attachment:\n", {n : p for n, p in zip(range(1, t + 2), P)})
        print("Randomly picked vertex:", second_node)
        print("Sum of probability distribution = ", sum(P))
        display_graph(G)
    if t >= t_stop:
        return G
    else:
        return hofstad_PA(G, delta, m, t+1, t_stop=t_stop, verbose=verbose)



main()